#!/usr/bin/env python3
#
# Copyright (c) 2020 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os.path
import re
import getopt
import traceback
from html import escape

import requests
import requests.auth
import requests.adapters


class ProgramError(Exception):
    pass


class HTTPSAdapter(requests.adapters.HTTPAdapter):
    def init_poolmanager(self, *args, **kwargs):
        kwargs['assert_hostname'] = False
        super().init_poolmanager(*args, **kwargs)


def set_ringtone(hostname, port, timeout, username, password, certificate_file, ringtone):
    xml = ('<?xml version="1.0" encoding="UTF-8"?>\n'
           '<setRingTone>\n'
           '  <ringTone>' + escape(ringtone) + '</ringTone>\n'
           '</setRingTone>\n')

    if username != '':
        auth = requests.auth.HTTPBasicAuth(username, password)
    else:
        auth = None

    scheme = 'https' if certificate_file else 'http'

    try:
        session = requests.Session()
        session.mount('https://', HTTPSAdapter())

        session.post(f'{scheme}://{hostname}:{port}/CGI/Execute',
                     timeout = timeout, auth = auth, verify = certificate_file, data = {'XML': xml})

    except requests.RequestException as error:
        raise ProgramError(error)

    print(f'Set ring-tone to {ringtone}')


def main():
    try:
        short_options = 'h:t:u:p:c:H'
        long_options = ['host=', 'timeout=', 'username=', 'password=', 'certificate=', 'help']

        try:
            options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
        except getopt.GetoptError as error:
            raise ProgramError(error.msg[0].upper() + error.msg[1:] +
                               '. Try \'' + os.path.basename(sys.argv[0]) + ' --help\' for more information')

        hostname = None
        port = None
        timeout = 10
        username = ''
        password = ''
        certificate_file = None
        help = False

        for option, argument in options:
            if option in ('-h', '--host'):
                hostname = argument

                if ':' in hostname:
                    hostname, port = hostname.rsplit(':', maxsplit = 1)

                    try:
                        port = int(port)

                        if port < 1 or port > 65535:
                            raise ValueError

                    except ValueError:
                        raise ProgramError(f'Invalid port: {port}')

                if not re.search(r'(?xi) ^ (?: [a-z0-9\-]+ \.)* [a-z0-9\-]+ $', hostname):
                    raise ProgramError(f'Invalid host: {hostname}')

            elif option in ('-t', '--timeout'):
                timeout = argument

                try:
                    timeout = int(timeout)

                    if timeout < 1:
                        raise ValueError

                except ValueError:
                    raise ProgramError(f'Invalid timeout: {timeout}')

            elif option in ('-u', '--username'):
                username = argument

            elif option in ('-p', '--password'):
                password = argument

            elif option in ('-c', '--certificate'):
                certificate_file = argument

            elif option in ('-H', '--help'):
                help = True

        if help:
            print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] RING-TONE\n'
                  'Set the ring-tone on a Cisco IP Phone.\n'
                  '\n'
                  '  -h, --host HOST[:PORT]         host name or IP address and port of the phone\n'
                  '  -t, --timeout TIMEOUT          connection timeout in seconds (default 10)\n'
                  '  -u, --username USERNAME        authentication username\n'
                  '  -p, --password PASSWORD        authentication password\n'
                  '  -c, --certificate CERT-FILE    connect using SSL and verify using certificate\n'
                  '  -H, --help                     print this help and exit\n'
                  '\n'
                  'RING-TONE is either an http: or https: URL.\n')

            return

        if not len(arguments):
            raise ProgramError('No ring-tone provided')

        ringtone = arguments[0]

        if not re.search(r'(?x) ^ https?:// ', ringtone):
            raise ProgramError(f'Invalid ring-tone: {ringtone}')

        if hostname is None:
            raise ProgramError('No host specified')

        if port is None:
            port = 443 if certificate_file else 80

        set_ringtone(hostname, port, timeout, username, password, certificate_file, ringtone)

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)


if __name__ == '__main__':
    main()
